#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
    
    // ++Диплом Купцов А.В. 31.05.2025
	// Добавлена обновление календаря специалиста
	Оповестить("Запись_ВКМ_ОбслуживаниеКлиента",,Объект.Ссылка);
	// --Диплом Купцов А.В. 31.05.2025
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		//@skip-check event-heandler-boolean-param
		Отказ = ПроверитьТипИСрокДействияДоговора(Объект.Договор);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ТекущийОбъект.ЭтоНовый()Тогда //Новый док
		НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		НоваяЗапись.ТекстСообщения = "Новый документ";
		НоваяЗапись.Записать();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот,
		|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан,
		|	ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан,
		|	ВКМ_ОбслуживаниеКлиента.Специалист
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаРабот = Выборка.ДатаПроведенияРабот;
		ВремяНачала = Выборка.ВремяНачалаРаботПлан;
		ВремяОкончания = Выборка.ВремяОкончанияРаботПлан;
		СпециалистНовый = Выборка.Специалист;
	КонецЕсли;
		//Изменилась дата
		Если ДатаРабот <> ТекущийОбъект.ДатаПроведенияРабот Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("Изменилась дата в документе %1", ТекущийОбъект.Ссылка);
			НоваяЗапись.Записать();
		КонецЕсли;
		//Изменилось время начала
		Если ВремяНачала <> ТекущийОбъект.ВремяНачалаРаботПлан Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("Изменилось время начала выполнения работ в документе %1", ТекущийОбъект.Ссылка);
			НоваяЗапись.Записать();
		КонецЕсли;
		//Иззменилось время окончания
		Если ВремяОкончания <> ТекущийОбъект.ВремяОкончанияРаботПлан Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("Изменилось время начала окончания работ в документе %1", ТекущийОбъект.Ссылка);
			НоваяЗапись.Записать();
		КонецЕсли;
		//Иззменился исполнитель
		Если СпециалистНовый <> ТекущийОбъект.Специалист Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("Изменился исполнитель документе %1", ТекущийОбъект.Ссылка);
			НоваяЗапись.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ПроверитьТипИСрокДействияДоговора(Ссылка)
		
		Отказ = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.ВКМ_ДатаНачалаДействияДоговора,
			|	ДоговорыКонтрагентов.ВКМ_ДатаОкончанияДействияДоговора,
			|	ДоговорыКонтрагентов.ВидДоговора
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.ВКМ_ДатаНачалаДействияДоговора;
			ДатаОкончания = Выборка.ВКМ_ДатаОкончанияДействияДоговора;
			ВидДоговора = Выборка.ВидДоговора;
			
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда 
				Если Объект.Дата < ДатаНачала Тогда
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = СтрШаблон("Действие договора начнется %1", ДатаНачала);
					Сообщение.Сообщить();
	
					Отказ = Истина;
				КонецЕсли;
				Если Объект.Дата > ДатаОкончания Тогда
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = СтрШаблон("Срок действия договора истек %1", ДатаОкончания);
					Сообщение.Сообщить();
	
					Отказ = Истина;
				КонецЕсли;	
			Иначе
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Тип договора должен быть Абонентская плата";
				Сообщение.Сообщить();
	
				Отказ = Истина;
			КонецЕсли;
	
		КонецЕсли;
	Возврат Отказ;
КонецФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

